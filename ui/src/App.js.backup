import React, { useState, useEffect, useRef } from 'react';
import ApiService from './services/api';

// Mock Data for Term and Motor policies (keeping original structure for non-health policies)
const termPoliciesData = [
  {
    id: 'term-lifeshield',
    type: 'Term',
    company: 'Life Shield Insurance',
    name: 'Life Shield Term Plan',
    shortDescription: 'Financial security for your loved ones up to age 65.',
    priceRange: '10,000 - 30,000 / year',
    benefits: [
      'High sum assured at affordable premiums.',
      'Death benefit paid as lump sum.',
      'Critical illness rider available.',
      'Accidental death benefit rider.',
      'Tax benefits under Section 80C and 10(10D).',
    ],
    exclusions: [
      'Suicide within the first 12 months.',
      'Fraudulent claims.',
    ],
    eligibility: [
      'Age: 18-60 years.',
      'Policy term up to 65 years of age.',
    ],
    rating: 4.7,
    reviewsCount: 950
  },
  {
    id: 'term-familysecure',
    type: 'Term',
    company: 'SecureLife Solutions',
    name: 'Family Secure Term Plan',
    shortDescription: 'Ensures long-term financial stability for your family.',
    priceRange: '12,000 - 40,000 / year',
    benefits: [
      'Flexible premium payment options.',
      'Increased cover at key life stages (marriage, childbirth).',
      'Option to receive maturity benefit (Return of Premium).',
      'Terminal illness benefit.',
    ],
    exclusions: [
      'Self-inflicted injury.',
      'Participation in criminal activities.',
    ],
    eligibility: [
      'Age: 20-55 years.',
      'Policy term up to 75 years.',
    ],
    rating: 4.6,
    reviewsCount: 1100
  }
];

const motorPoliciesData = [
  {
    id: 'motor-driveprotect',
    type: 'Motor',
    company: 'DriveProtect Insurance',
    name: 'DriveProtect Comprehensive',
    shortDescription: 'All-round protection for your car against damage and theft.',
    priceRange: '3,000 - 15,000 / year',
    benefits: [
      'Damage to own vehicle covered.',
      'Third-party liability cover.',
      'Personal accident cover for owner-driver.',
      '24/7 roadside assistance.',
      'Cashless garage network.',
    ],
    exclusions: [
      'Wear and tear.',
      'Driving without a valid license.',
      'Damage due to war or nuclear risk.',
    ],
    eligibility: [
      'Valid driving license required.',
      'Vehicle registration required.',
    ],
    rating: 4.3,
    reviewsCount: 2500
  },
  {
    id: 'motor-two-wheeler',
    type: 'Motor',
    company: 'SpeedSafe Insurance',
    name: 'Two-Wheeler Protect',
    shortDescription: 'Essential insurance for your motorcycle or scooter.',
    priceRange: '1,500 - 5,000 / year',
    benefits: [
      'Mandatory third-party liability cover.',
      'Own damage cover for accidents and natural calamities.',
      'Theft protection.',
      'Personal accident cover for owner-driver.',
    ],
    exclusions: [
      'Consequential loss.',
      'Mechanical or electrical breakdown.',
      'Driving under influence of alcohol/drugs.',
    ],
    eligibility: [
      'Valid driving license.',
      'Valid vehicle registration.',
    ],
    rating: 4.1,
    reviewsCount: 1500
  }
];

// Payment pricing structure
const PAYMENT_PRICING = {
  1: { price: 0, description: "Free" },
  2: { price: 90, description: "Standard Plan" },
  3: { price: 150, description: "Premium Plan" },
  4: { price: 200, description: "Advanced Plan" },
  5: { price: 250, description: "Complete Plan" }
};

// AutoScrollingQuestions Component - For both mobile and desktop
const AutoScrollingQuestions = ({ questions, onQuestionClick }) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isPaused, setIsPaused] = useState(false);
  const [touchStartX, setTouchStartX] = useState(0);
  const [touchEndX, setTouchEndX] = useState(0);
  const [isSwiping, setIsSwiping] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const marqueeRef = useRef(null);
  
  useEffect(() => {
    setIsInitialized(true);
  }, []);
  
  useEffect(() => {
    if (!isInitialized) return;
    
    const interval = setInterval(() => {
      if (!isPaused) {
        setCurrentQuestionIndex(prev => (prev + 1) % questions.length);
      }
    }, 3000);
    
    return () => clearInterval(interval);
  }, [questions.length, isPaused, isInitialized]);
  
  const handleStart = (clientX) => {
    setTouchStartX(clientX);
    setIsPaused(true);
    setIsSwiping(false);
  };
  
  const handleMove = (clientX) => {
    setTouchEndX(clientX);
    setIsSwiping(true);
  };
  
  const handleEnd = () => {
    if (isSwiping) {
      if (touchStartX - touchEndX > 75) {
        setCurrentQuestionIndex(prev => (prev + 1) % questions.length);
      } else if (touchEndX - touchStartX > 75) {
        setCurrentQuestionIndex(prev => (prev - 1 + questions.length) % questions.length);
      }
    }
    setIsPaused(false);
    setIsSwiping(false);
  };
  
  const handleTouchStart = (e) => {
    handleStart(e.targetTouches[0].clientX);
  };
  
  const handleTouchMove = (e) => {
    handleMove(e.targetTouches[0].clientX);
  };
  
  const handleTouchEnd = () => {
    handleEnd();
  };
  
  const handleMouseDown = (e) => {
    handleStart(e.clientX);
  };
  
  const handleMouseMove = (e) => {
    if (isSwiping) {
      handleMove(e.clientX);
    }
  };
  
  const handleMouseUp = () => {
    handleEnd();
  };
  
  return (
    <div className="w-full">
      {/* Mobile version */}
      <div className="sm:hidden">
        <div 
          ref={marqueeRef}
          className="h-10 overflow-hidden relative"
          onTouchStart={handleTouchStart}
          onTouchMove={handleTouchMove}
          onTouchEnd={handleTouchEnd}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseEnter={() => setIsPaused(true)}
          onMouseLeave={() => setIsPaused(false)}
        >
          <div 
            className="absolute top-0 left-0 w-full h-full flex items-center justify-center transition-transform duration-1000 ease-in-out"
            style={{ 
              transform: `translateX(-${currentQuestionIndex * (100 / questions.length)}%)`,
              width: `${questions.length * 100}%`,
              transition: isInitialized ? 'transform 1000ms ease-in-out' : 'none'
            }}
          >
            {questions.map((question, index) => (
              <div 
                key={index} 
                className="flex-shrink-0 flex items-center justify-center px-2"
                style={{ width: `${100 / questions.length}%` }}
              >
                <button
                  onClick={() => onQuestionClick(question)}
                  className="h-10 inline-flex items-center justify-center text-xs text-cyan-800 px-4 transition-colors duration-200 whitespace-nowrap overflow-hidden text-ellipsis bg-cyan-100 hover:bg-cyan-200 rounded-full"
                  aria-label={`Ask: ${question}`}
                >
                  {question}
                </button>
              </div>
            ))}
          </div>
        </div>
        
        <div className="flex justify-center mt-1 space-x-1">
          {questions.map((_, index) => (
            <div 
              key={index} 
              className={`w-2 h-2 rounded-full ${index === currentQuestionIndex ? 'bg-gray-600' : 'bg-gray-300'}`}
            />
          ))}
        </div>
      </div>
      
      {/* Desktop version */}
      <div className="hidden sm:block">
        <div className="h-10 overflow-hidden relative group">
          <div 
            className="absolute top-0 left-0 h-full flex items-center animate-marquee whitespace-nowrap"
            style={{ 
              animationDuration: '80s',
              opacity: isInitialized ? 1 : 0,
              transition: 'opacity 0.3s ease-in-out'
            }}
          >
            {questions.map((question, index) => (
              <button
                key={index}
                onClick={() => onQuestionClick(question)}
                className="mx-2 h-10 inline-flex items-center justify-center text-xs text-cyan-800 px-4 transition-colors duration-200 whitespace-nowrap overflow-hidden text-ellipsis bg-cyan-100 hover:bg-cyan-200 rounded-full"
                aria-label={`Ask: ${question}`}
              >
                {question}
              </button>
            ))}
            {questions.map((question, index) => (
              <button
                key={`dup-${index}`}
                onClick={() => onQuestionClick(question)}
                className="mx-2 h-10 inline-flex items-center justify-center text-xs text-cyan-800 px-4 transition-colors duration-200 whitespace-nowrap overflow-hidden text-ellipsis bg-cyan-100 hover:bg-cyan-200 rounded-full"
                aria-label={`Ask: ${question}`}
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// TopBar Component - Mobile responsive adjustments
const TopBar = ({ 
  showBackButton, 
  onBackClick, 
  title, 
  showAuthButtons, 
  isChatScreen, 
  isChatSidebarOpen, 
  onToggleChatSidebar, 
  onLoginClick, 
  onSignUpClick, 
  onMenuClick, 
  isShowingComparisonScreen,
  isDirectChatAccess 
}) => {
  return (
    <div className={`fixed top-0 left-0 right-0 p-2 sm:p-4 bg-cyan-800 shadow-sm text-sm text-white flex items-center z-10 w-full rounded-b-xl`} aria-label="Top navigation">
      {/* Left section: Hamburger for chat, or Back for other screens */}
      <div className="flex items-center">
        
        {/* Conditional Back button for Chat screen when sidebar is CLOSED */}
        {isChatScreen && !isChatSidebarOpen && showBackButton && (
          <button onClick={onBackClick} className="p-1 mr-2 text-white hover:bg-cyan-700 rounded-full transition-colors duration-200" aria-label="Go back">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                <path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" />
              </svg>
          </button>
        )}
        {/* Branding/Title - always aligns with the visible elements on the left */}
        <div className={`flex items-baseline`}>
          {isChatScreen ? (
            <>
              <h1 className="text-lg sm:text-xl font-bold text-white">🏥 PolicyAdvise</h1>
              <span className="text-xs text-cyan-200 ml-1 hidden sm:inline"></span>
            </>
          ) : (
            title ? (
              <span className="text-sm sm:text-base font-medium text-white flex-grow">{title}</span>
            ) : (
              <h1 className="text-lg sm:text-xl font-bold text-white">🏥 PolicyAdvise</h1>
            )
          )}
        </div>
      </div>
      {/* Right section: Auth Buttons (only on home) and Menu Button (only on chat screen) */}
      <div className="flex items-center space-x-1 sm:space-x-2 ml-auto">
        {showAuthButtons && (
          <>
            <button
              onClick={onLoginClick}
              className="px-2 sm:px-4 py-1 sm:py-2 text-white border border-white rounded-lg hover:bg-cyan-700 transition-colors duration-200 text-xs sm:text-sm font-medium"
              aria-label="Log in"
            >
              Log In
            </button>
            <button
              onClick={onSignUpClick}
              className="px-2 sm:px-4 py-1 sm:py-2 bg-white text-cyan-800 rounded-lg hover:bg-cyan-100 transition-colors duration-200 text-xs sm:text-sm font-medium"
              aria-label="Sign up"
            >
              Sign Up
            </button>
          </>
        )}
        {isChatScreen && (
          <button
            onClick={onMenuClick}
            className="px-2 sm:px-4 py-1 sm:py-2 bg-white text-cyan-800 rounded-lg hover:bg-cyan-100 transition-colors duration-200 text-xs sm:text-sm font-medium ml-1 sm:ml-2"
            aria-label="Open menu"
          >
            Choose Policy
          </button>
        )}
      </div>
    </div>
  );
};

// ScreenWrapper Component - Provides consistent padding and centering for screens
const ScreenWrapper = ({ children, isCentered = false, maxWidthClass = 'max-w-md', backgroundColor = 'bg-white' }) => (
  <div className={`flex flex-col flex-grow w-full rounded-xl shadow-lg border border-gray-200 p-4 sm:p-6 md:p-8 ${maxWidthClass} mx-auto ${isCentered ? 'justify-center items-center' : ''} ${backgroundColor}`}>
    {children}
  </div>
);

// HomeScreen Component - Modified layout with normal scrolling
const HomeScreen = ({ onCheckMyPolicyClick, onExplorePolicyTypesClick }) => {
  // Fixed developer video URL
  const developerVideoUrl = "https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4";
  
  return (
    <div className="flex flex-col h-full bg-white w-full">
      {/* Main Content */}
      <div className="flex flex-col items-center p-4 sm:p-6 md:p-8">
        {/* Cyan Box with Main Heading - Modified for one-line text */}
        <div className="bg-gradient-to-r from-cyan-600 to-cyan-500 text-white py-4 px-6 rounded-xl shadow-lg mb-8 w-full max-w-4xl flex justify-center items-center">
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-center whitespace-nowrap">
            Real Insurance Data. AI-Powered Insights.
          </h1>
        </div>
        
        <p className="text-lg text-gray-600 text-center max-w-2xl mb-8">
          Our platform uses actual extracted policy data to provide unbiased comparisons and recommendations.
        </p>
        
        <div className="flex flex-col sm:flex-row gap-4 mb-12">
          <button 
            onClick={onCheckMyPolicyClick}
            className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition duration-300"
          >
            Check My Policy Free
          </button>
          <button 
            onClick={onExplorePolicyTypesClick}
            className="border border-cyan-600 text-cyan-600 hover:bg-cyan-50 font-bold py-3 px-6 rounded-lg transition duration-300"
          >
            Explore Policy Types 📋
          </button>
        </div>
        
        <div className="flex flex-col sm:flex-row justify-center gap-8 mb-12">
          <div className="flex flex-col items-center">
            <div className="bg-cyan-100 p-4 rounded-full mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
            <p className="font-semibold text-gray-800">Real Extracted Data, not commissions</p>
          </div>
          <div className="flex flex-col items-center">
            <div className="bg-cyan-100 p-4 rounded-full mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
              </svg>
            </div>
            <p className="font-semibold text-gray-800">Covers 11+ real policies in India</p>
          </div>
        </div>
        
        {/* How PolicyAdvise Works Section - Light cyan background */}
        <div className="w-full max-w-6xl mb-12">
          <div className="flex flex-col md:flex-row gap-8">
            {/* Left side - Heading */}
            <div className="md:w-1/3 flex items-center justify-center">
              <h2 className="text-6xl font-bold text-gray-800">How PolicyAdvise Works</h2>
            </div>
            
            {/* Right side - Content */}
            <div className="md:w-2/3">
              {/* Description section */}
              <div className="mb-6">
                <p className="text-gray-600 text-lg mb-4">
                  Watch our explainer video to learn how our platform helps you find the perfect insurance policy
                </p>
                
                {/* Features section - Single light cyan box containing all four points */}
                <div className="bg-cyan-50 rounded-lg shadow-sm p-6 mb-6 border border-cyan-100">
                  {/* Feature 1: PolicyAdvise Explainer Video */}
                  <div className="flex items-start mb-4">
                    <div className="flex-shrink-0 mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="font-medium text-gray-800">Real Data Extraction</p>
                      <p className="text-sm text-gray-600">AI-powered extraction from actual policy documents</p>
                    </div>
                  </div>
                  
                  {/* Feature 2: Simple 3-Step Process */}
                  <div className="flex items-start mb-4">
                    <div className="flex-shrink-0 mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="font-medium text-gray-800">Simple 3-Step Process</p>
                      <p className="text-sm text-gray-600">Share your needs → Compare policies → Get unbiased advice</p>
                    </div>
                  </div>
                  
                  {/* Feature 3: AI-Powered Analysis */}
                  <div className="flex items-start mb-4">
                    <div className="flex-shrink-0 mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="font-medium text-gray-800">AI-Powered Analysis</p>
                      <p className="text-sm text-gray-600">Advanced algorithms analyze real policy data to find the best match</p>
                    </div>
                  </div>
                  
                  {/* Feature 4: Expert Support */}
                  <div className="flex items-start">
                    <div className="flex-shrink-0 mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="font-medium text-gray-800">Expert Support</p>
                      <p className="text-sm text-gray-600">Get help from certified insurance advisors when you need it</p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Video section */}
              <div className="bg-cyan-50 rounded-xl shadow-md overflow-hidden border border-cyan-100">
                <div className="relative">
                  <video 
                    src={developerVideoUrl} 
                    controls 
                    className="w-full max-h-64 object-contain bg-black"
                    poster="https://images.unsplash.com/photo-1611162617213-7d7a39e9b1d7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80"
                  >
                    Your browser does not support the video tag.
                  </video>
                </div>
                
                <div className="p-4 flex justify-between items-center">
                  <div>
                    <p className="font-medium text-gray-800">PolicyAdvise Explainer Video</p>
                    <p className="text-sm text-gray-500">Learn how our platform works in 2 minutes</p>
                  </div>
                  
                  <div className="flex space-x-2">
                    <a 
                      href={developerVideoUrl}
                      download
                      className="bg-cyan-600 text-white px-4 py-2 rounded-lg hover:bg-cyan-700 transition-colors"
                      aria-label="Download video"
                    >
                      Download
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Footer */}
      <div className="mt-auto p-4 border-t border-gray-200 flex justify-center space-x-6 text-sm text-gray-500">
        <a href="#" className="hover:text-cyan-600">Privacy</a>
        <a href="#" className="hover:text-cyan-600">Terms</a>
        <a href="#" className="hover:text-cyan-600">Contact</a>
      </div>
    </div>
  );
};

// SignUpScreen Component - User registration page
const SignUpScreen = ({ onBack, onLoginClick }) => (
  <ScreenWrapper>
    <div className="w-full flex items-center mb-6 sm:mb-8">
      <button onClick={onBack} className="p-2 mr-4 text-gray-600 hover:bg-gray-200 rounded-full transition-colors duration-200" aria-label="Go back">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
          <path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <h1 className="text-2xl sm:text-3xl md:text-4xl font-semibold text-gray-800 text-center flex-grow">
        Sign Up
      </h1>
    </div>
    <div className="flex flex-col items-center flex-grow justify-center w-full space-y-4">
      <input
        type="text"
        placeholder="Name"
        className="w-full max-w-xs p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-cyan-400 font-inter"
        aria-label="Full name"
      />
      <input
        type="password"
        placeholder="Password"
        className="w-full max-w-xs p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-cyan-400 font-inter"
        aria-label="Password"
      />
      <button className="text-cyan-600 text-sm hover:underline self-end max-w-xs w-full text-right font-inter bg-transparent border-none p-0 cursor-pointer">
        Forgot Password?
      </button>
    </div>
    <div className="w-full max-w-xs flex flex-col items-center mt-6 sm:mt-8">
      <button
        className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-cyan-300 w-full mb-4"
        aria-label="Sign up"
      >
        Sign Up
      </button>
      <button
        onClick={onLoginClick}
        className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-cyan-300 w-full"
        aria-label="Log in"
      >
        Log in
      </button>
    </div>
  </ScreenWrapper>
);

// LoginScreen Component - User login page
const LoginScreen = ({ onBack, onSignUpClick }) => (
  <ScreenWrapper>
    <div className="w-full flex items-center mb-6 sm:mb-8">
      <button onClick={onBack} className="p-2 mr-4 text-gray-600 hover:bg-gray-200 rounded-full transition-colors duration-200" aria-label="Go back">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
          <path strokeLinecap="round" strokeLinejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <h1 className="text-2xl sm:text-3xl md:text-4xl font-semibold text-gray-800 text-center flex-grow">
        Log In
      </h1>
    </div>
    <div className="flex flex-col items-center flex-grow justify-center w-full space-y-4">
      <input
        type="email"
        placeholder="Email"
        className="w-full max-w-xs p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-cyan-400 font-inter"
        aria-label="Email"
      />
      <input
        type="password"
        placeholder="Password"
        className="w-full max-w-xs p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-cyan-400 font-inter"
        aria-label="Password"
      />
      <button className="text-cyan-600 text-sm hover:underline self-end max-w-xs w-full text-right font-inter bg-transparent border-none p-0 cursor-pointer">
        Forgot Password?
      </button>
    </div>
    <div className="w-full max-w-xs flex flex-col items-center mt-6 sm:mt-8">
      <button
        className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-cyan-300 w-full mb-4"
        aria-label="Log in"
      >
        Log In
      </button>
      <button
        onClick={onSignUpClick}
        className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-cyan-300 w-full"
        aria-label="Sign up"
      >
        Sign Up
      </button>
    </div>
  </ScreenWrapper>
);

// ChatHistorySidebar Component - Displays only the 'New Chat' option and a close button
const ChatHistorySidebar = ({ isOpen, onNewChat, onToggleChatSidebar }) => {
  return (
    <div className={`fixed inset-y-0 left-0 w-64 bg-white shadow-xl z-20 flex flex-col rounded-r-xl border-r border-gray-200 transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}>
      <div className="p-4 border-b border-gray-200 flex justify-between items-center">
        <div className="flex items-baseline">
          <h2 className="text-2xl font-bold text-cyan-600">🏥 PolicyAdvise</h2>
          <span className="text-xs text-gray-500 ml-1">2.5 Flash</span>
        </div>
        <button onClick={onToggleChatSidebar} className="p-1 text-gray-600 hover:bg-gray-200 rounded-full transition-colors duration-200" aria-label="Close sidebar">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
            <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div className="p-4 flex-grow overflow-y-auto">
        <button
          onClick={onNewChat}
          className="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded-xl shadow-md mb-4 transition duration-200"
          aria-label="Start new chat"
        >
          + New chat
        </button>
      </div>
    </div>
  );
};

// PolicyCard Component - Updated to handle real data
const PolicyCard = ({ 
  policy, 
  onGetAdvice, 
  onCompareClick, 
  isSelectedForComparison, 
  disableCompareButton,
  isPolicyForAdvice
}) => {
  return (
    <div className={`bg-white rounded-xl shadow-md p-3 sm:p-4 border 
      ${isPolicyForAdvice ? 'border-purple-400 ring-2 ring-purple-200' : isSelectedForComparison ? 'border-purple-400 ring-2 ring-purple-200' : 'border-gray-200'} 
      hover:shadow-lg transition-shadow duration-200 relative`}>
      
      {isPolicyForAdvice && (
        <div className="absolute top-2 right-2 text-purple-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" viewBox="0 0 20 20" fill="currentColor">
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        </div>
      )}
      
      <div className="flex flex-col sm:flex-row justify-between items-start">
        <div className="flex-1 pr-0 sm:pr-6 mb-3 sm:mb-0">
          <h2 className="text-base sm:text-lg font-semibold text-gray-800 mb-1">{policy.name}</h2>
          <p className="text-gray-600 text-xs sm:text-sm mb-1">{policy.company}</p>
          <p className="text-gray-600 text-xs sm:text-sm">{policy.shortDescription}</p>
          {policy.product_uin && (
            <p className="text-gray-500 text-xs mt-1">UIN: {policy.product_uin}</p>
          )}
        </div>
        
        <div className="flex flex-col items-end text-right min-w-[80px] sm:min-w-[90px] ml-0 sm:ml-4">
          <div className="text-xs sm:text-sm text-gray-700 mb-2">
            <div className="font-medium">Price: {policy.priceRange}</div>
          </div>
          <div className="flex flex-col items-end">
            <div className="text-xs sm:text-sm text-purple-500 mb-1">
              {'★'.repeat(Math.floor(policy.rating))}
              {policy.rating % 1 !== 0 && '☆'}
            </div>
            <div className="text-xs text-gray-600">({policy.reviewsCount} reviews)</div>
          </div>
          {policy.network_hospitals > 0 && (
            <div className="text-xs text-green-600 mt-1">
              {policy.network_hospitals.toLocaleString()} hospitals
            </div>
          )}
        </div>
      </div>
      
      <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-3 mt-4">
        <button
          onClick={() => onGetAdvice(policy)}
          className={`py-2 px-4 rounded-lg transition-colors duration-200 text-xs sm:text-sm font-medium
            ${isPolicyForAdvice 
              ? 'bg-purple-500 text-white hover:bg-purple-600' 
              : 'bg-cyan-100 text-cyan-700 hover:bg-cyan-200'
            }`}
        >
          Get Unbiased Advice
        </button>
        <button
          onClick={() => onCompareClick(policy)}
          disabled={disableCompareButton && !isSelectedForComparison}
          className={`py-2 px-4 rounded-lg transition-colors duration-200 text-xs sm:text-sm font-medium
            ${isSelectedForComparison
              ? 'bg-purple-500 text-white hover:bg-purple-600 shadow-md'
              : disableCompareButton && !isSelectedForComparison
                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                : 'bg-green-100 text-green-700 hover:bg-green-200'
            }`}
        >
          {isSelectedForComparison ? 'Selected' : 'Compare'}
        </button>
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  const [currentScreen, setCurrentScreen] = useState('home');
  const [healthPolicies, setHealthPolicies] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedPolicyType, setSelectedPolicyType] = useState(null);
  const [selectedBudget, setSelectedBudget] = useState('5000');
  const [policiesToCompare, setPoliciesToCompare] = useState([]);
  const [comparisonFeedback, setComparisonFeedback] = useState('');
  const [providers, setProviders] = useState([]);
  const [statistics, setStatistics] = useState({});
  const [showMenuSidePanel, setShowMenuSidePanel] = useState(false);
  const [initialPolicyForChat, setInitialPolicyForChat] = useState(null);
  const [isDirectChatAccess, setIsDirectChatAccess] = useState(false);
  const [policyForAdvice, setPolicyForAdvice] = useState(null);
  const [showSingleComparison, setShowSingleComparison] = useState(false);
  const [isChatSidebarOpen, setIsChatSidebarOpen] = useState(false);
  const [chatHistories, setChatHistories] = useState([]);
  const [currentChatId, setCurrentChatId] = useState(null);

  // Combined policies data (health from API + mock term/motor)
  const [allPolicies, setAllPolicies] = useState([]);

  // Load policies on component mount
  useEffect(() => {
    loadHealthPolicies();
    loadProviders();
    loadStatistics();
  }, []);

  // Combine health policies with mock data when health policies change
  useEffect(() => {
    const combined = [...healthPolicies, ...termPoliciesData, ...motorPoliciesData];
    setAllPolicies(combined);
  }, [healthPolicies]);

  const loadHealthPolicies = async (filters = {}) => {
    setLoading(true);
    setError(null);
    try {
      const policiesData = await ApiService.fetchPolicies(filters);
      setHealthPolicies(policiesData);
    } catch (err) {
      setError('Failed to load policies. Please make sure the backend server is running.');
      console.error('Error loading policies:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadProviders = async () => {
    try {
      const providersData = await ApiService.fetchProviders();
      setProviders(providersData);
    } catch (err) {
      console.error('Error loading providers:', err);
    }
  };

  const loadStatistics = async () => {
    try {
      const statsData = await ApiService.fetchStatistics();
      setStatistics(statsData);
    } catch (err) {
      console.error('Error loading statistics:', err);
    }
  };

  const handleCompareClick = (policy) => {
    if (policyForAdvice && policyForAdvice.id === policy.id) {
      setPolicyForAdvice(null);
    }
    
    setPoliciesToCompare(prev => {
      const isAlreadySelected = prev.some(p => p.id === policy.id);
      if (isAlreadySelected) {
        const newList = prev.filter(p => p.id !== policy.id);
        setComparisonFeedback(newList.length > 0 ? `${newList.length} policy(s) selected.` : '');
        return newList;
      } else {
        if (prev.length < 5) {
          const newList = [...prev, policy];
          setComparisonFeedback(`${newList.length} policy(s) selected.`);
          return newList;
        } else {
          setComparisonFeedback("You can compare a maximum of 5 policies. Please deselect one to add another.");
          return prev;
        }
      }
    });
  };

  const handleClearComparison = () => {
    setPoliciesToCompare([]);
    setComparisonFeedback('');
    setShowSingleComparison(false);
  };

  const handleGetAdvice = (policy) => {
    setPolicyForAdvice(policy);
    setInitialPolicyForChat(policy);
    navigateTo('policyAdvisorChat');
    setShowMenuSidePanel(false);
  };

  const navigateTo = (screenName, data = null, preservePolicies = false) => {
    if (!preservePolicies) {
      setPoliciesToCompare([]);
      setComparisonFeedback('');
      setShowSingleComparison(false);
    }
    
    setCurrentScreen(screenName);
    
    if (screenName === 'home') {
      setSelectedPolicyType(null);
      setSelectedBudget('5000');
      setPoliciesToCompare([]);
      setComparisonFeedback('');
      setInitialPolicyForChat(null);
      setShowMenuSidePanel(false);
      setIsDirectChatAccess(false);
      setPolicyForAdvice(null);
      setShowSingleComparison(false);
    }
    
    if (screenName !== 'policyListing') {
      window.scrollTo(0, 0);
    }
    
    if (screenName === 'policyListing' && data) {
      setSelectedPolicyType(data);
    }
    
    if (screenName === 'policyAdvisorChat') {
      setIsDirectChatAccess(!selectedPolicyType && !selectedBudget && policiesToCompare.length === 0);
    } else {
      setIsDirectChatAccess(false);
    }
  };

  const getScreenTitle = () => {
    switch (currentScreen) {
      case 'home': return '';
      case 'signUp': return 'Sign Up';
      case 'policyAdvisorChat': return '';
      case 'policyListing': return selectedPolicyType ? `${selectedPolicyType} Plans` : 'All Recommended Plans';
      case 'login': return 'Log In';
      default: return '';
    }
  };

  const showBackButtonForScreen = () => {
    if (currentScreen === 'home' || currentScreen === 'signUp' || currentScreen === 'login') {
      return false;
    }
    return true;
  };

  const showAuthButtonsForScreen = () => {
    return currentScreen === 'home';
  };

  const handleCheckMyPolicyFromHome = () => {
    setSelectedPolicyType(null);
    setSelectedBudget('5000');
    setPoliciesToCompare([]);
    setComparisonFeedback('');
    setPolicyForAdvice(null);
    setShowSingleComparison(false);
    
    navigateTo('policyAdvisorChat');
    
    setTimeout(() => {
      handleNewChat();
    }, 0);
  };

  const handleExplorePolicyTypesFromHome = () => {
    setSelectedPolicyType(null);
    setSelectedBudget('5000');
    setPoliciesToCompare([]);
    setComparisonFeedback('');
    setPolicyForAdvice(null);
    setShowSingleComparison(false);
    
    navigateTo('policyListing');
  };

  const handleMenuClick = () => {
    setShowMenuSidePanel(prev => !prev);
  };

  const handleBackClick = () => {
    if (currentScreen === 'policyAdvisorChat' && showMenuSidePanel) {
      setShowMenuSidePanel(false);
      navigateTo('home');
      return;
    }
    
    switch (currentScreen) {
      case 'policyListing':
        navigateTo('home');
        break;
      case 'policyAdvisorChat':
        setSelectedPolicyType(null);
        setSelectedBudget('5000');
        setPoliciesToCompare([]);
        setComparisonFeedback('');
        setInitialPolicyForChat(null);
        setShowMenuSidePanel(false);
        setIsDirectChatAccess(false);
        setPolicyForAdvice(null);
        setShowSingleComparison(false);
        
        navigateTo('home');
        break;
      case 'signUp':
        navigateTo('home');
        break;
      case 'login':
        navigateTo('home');
        break;
      default:
        navigateTo('home');
    }
  };

  const handleNewChat = () => {
    const newChatId = 'chat-' + Date.now();
    const newChatSession = {
      id: newChatId,
      title: 'New Chat',
      messages: [{ id: 1, text: "Hello! I'm your Policy Advisor. How can I help you today?", sender: 'bot' }]
    };
    setChatHistories((prev) => [...prev, newChatSession]);
    setCurrentChatId(newChatId);
  };

  const handleNewMessage = (message, sender) => {
    setChatHistories((prevHistories) =>
      prevHistories.map((chat) =>
        chat.id === currentChatId
          ? {
              ...chat,
              messages: [...chat.messages, { id: chat.messages.length + 1, text: message, sender }],
              title: chat.title === 'New Chat' && sender === 'user' ? message.substring(0, 30) + (message.length > 30 ? '...' : '') : chat.title
            }
          : chat
      )
    );
  };

  // Get policies based on selected type
  const getFilteredPolicies = () => {
    if (!selectedPolicyType) return allPolicies;
    return allPolicies.filter(policy => policy.type === selectedPolicyType);
  };

  // PolicyListingScreen Component - Updated to handle all policy types
  const PolicyListingScreen = () => {
    const filteredPolicies = getFilteredPolicies();
    const [sortOption, setSortOption] = useState('rating-high');
    
    const sortedPolicies = [...filteredPolicies].sort((a, b) => {
      switch(sortOption) {
        case 'price-low':
          const aMinPrice = parseInt(a.priceRange.split('-')[0].replace(/[^\d]/g, ''));
          const bMinPrice = parseInt(b.priceRange.split('-')[0].replace(/[^\d]/g, ''));
          return aMinPrice - bMinPrice;
        case 'price-high':
          const aMaxPrice = parseInt(a.priceRange.split('-')[1].replace(/[^\d]/g, ''));
          const bMaxPrice = parseInt(b.priceRange.split('-')[1].replace(/[^\d]/g, ''));
          return bMaxPrice - aMaxPrice;
        case 'rating-low':
          return a.rating - b.rating;
        case 'rating-high':
        default:
          return b.rating - a.rating;
      }
    });
    
    const screenTitle = selectedPolicyType ? `${selectedPolicyType} Plans` : 'All Recommended Plans';
    const disableOtherCompareButtons = policiesToCompare.length >= 5;
    
    return (
      <div className="flex flex-col h-full bg-gray-50 w-full max-w-5xl mx-auto rounded-xl shadow-lg border border-gray-200 overflow-y-auto mt-8">
        <div className="flex-grow p-4 sm:p-6 md:p-8">
          <div className="flex flex-col sm:flex-row justify-between items-center mb-4 sm:mb-6">
            <h1 className="text-xl sm:text-2xl md:text-3xl lg:text-4xl font-semibold text-gray-800 mb-3 sm:mb-0">
              {screenTitle}
            </h1>
            
            <div className="flex items-center space-x-2 w-full sm:w-auto">
              <span className="text-gray-700 font-medium text-sm sm:text-base">Sort by:</span>
              <select 
                value={sortOption} 
                onChange={(e) => setSortOption(e.target.value)}
                className="px-2 sm:px-3 py-1 sm:py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-400 text-sm w-full sm:w-auto"
                aria-label="Sort policies"
              >
                <option value="rating-high">Rating (High to Low)</option>
                <option value="rating-low">Rating (Low to High)</option>
                <option value="price-low">Price (Low to High)</option>
                <option value="price-high">Price (High to Low)</option>
              </select>
            </div>
          </div>
          
          {comparisonFeedback && (
            <div className="mb-4 sm:mb-6 p-2 sm:p-3 bg-cyan-100 text-cyan-800 rounded-lg text-center font-medium flex flex-col sm:flex-row justify-between items-center">
              <span className="text-sm sm:text-base">{comparisonFeedback}</span>
              {policiesToCompare.length > 0 && (
                <button
                  onClick={handleClearComparison}
                  className="mt-2 sm:mt-0 sm:ml-4 px-3 py-1 bg-gray-200 text-gray-700 text-sm rounded-md hover:bg-gray-300 transition-colors duration-200"
                  aria-label="Clear all selections"
                >
                  Clear All
                </button>
              )}
            </div>
          )}
          
          {loading && (
            <div className="text-center py-8">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-600"></div>
              <p className="mt-2 text-gray-600">Loading policies...</p>
            </div>
          )}
          
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
              <p>{error}</p>
              <button
                onClick={() => loadHealthPolicies()}
                className="mt-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm"
              >
                Retry
              </button>
            </div>
          )}
          
          {!loading && !error && (
            <div className="flex flex-col gap-4 sm:gap-6">
              {sortedPolicies.map((policy) => (
                <PolicyCard
                  key={policy.id}
                  policy={policy}
                  onGetAdvice={handleGetAdvice}
                  onCompareClick={handleCompareClick}
                  isSelectedForComparison={policiesToCompare.some(p => p.id === policy.id)}
                  disableCompareButton={disableOtherCompareButtons}
                  isPolicyForAdvice={policyForAdvice && policy.id === policyForAdvice.id}
                />
              ))}
            </div>
          )}
          
          {!loading && !error && sortedPolicies.length === 0 && (
            <div className="text-center py-8">
              <p className="text-gray-600">No policies found for the selected criteria.</p>
            </div>
          )}
        </div>
        
        {policiesToCompare.length > 0 && (
          <div className="fixed bottom-4 sm:bottom-6 left-1/2 transform -translate-x-1/2 bg-white p-2 sm:p-4 shadow-lg border border-gray-200 rounded-xl flex justify-center items-center space-x-2 sm:space-x-4 z-30 w-11/12 sm:w-auto">
            <button
              onClick={() => console.log('Compare policies:', policiesToCompare)}
              disabled={policiesToCompare.length < 1}
              className={`font-bold py-2 sm:py-3 px-4 sm:px-8 rounded-xl shadow-lg transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 text-sm sm:text-base
                ${policiesToCompare.length >= 1 ? 'bg-purple-500 hover:bg-purple-600 text-white focus:ring-purple-300 shadow-xl' : 
                  'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
              aria-label={`Compare ${policiesToCompare.length} policies`}
            >
              Compare ({policiesToCompare.length})
            </button>
            <button
              onClick={handleClearComparison}
              className="font-bold py-1 sm:py-2 px-3 sm:px-6 rounded-xl shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-300 text-sm sm:text-base"
              aria-label="Clear all selections"
            >
              Clear All
            </button>
          </div>
        )}
      </div>
    );
  };

  // MenuSidePanel Component - Updated to handle all policy types
  const MenuSidePanel = ({ 
    isOpen, 
    onClose,
    selectedPolicyType,
    setSelectedPolicyType,
    selectedBudget,
    setSelectedBudget,
    policiesToCompare,
    onCompareClick,
    onClearComparison,
    onGetAdvice,
    comparisonFeedback,
    policyForAdvice,
    setShowMenuSidePanel
  }) => {
    const [showPlans, setShowPlans] = useState(false);
    const [isScrolled, setIsScrolled] = useState(false);
    const policyListingRef = useRef(null);
    const panelContentRef = useRef(null);
    const originalSectionRef = useRef(null);
    
    const filteredPolicies = getFilteredPolicies();
    const sortedPolicies = [...filteredPolicies].sort((a, b) => b.rating - a.rating);
    
    const ensureAmount = selectedBudget ? (parseInt(selectedBudget) * 100).toLocaleString('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 }) : '₹5,00,000';
    const monthlyPremium = selectedBudget ? (parseInt(selectedBudget) / 12).toLocaleString('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 }) : '₹417';
    const totalCoverAmount = selectedBudget ? (parseInt(selectedBudget) * 1000).toLocaleString('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 }) : '₹50,00,000';
    
    const handleGetPlansClick = () => {
      if (selectedPolicyType) {
        setShowPlans(true);
        setTimeout(() => {
          if (policyListingRef.current) {
            policyListingRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 100);
      }
    };
    
    const handlePolicyTypeChange = (type) => {
      setSelectedPolicyType(type);
      setShowPlans(false);
      if (panelContentRef.current) {
        panelContentRef.current.scrollTo({ top: 0, behavior: 'smooth' });
      }
    };
    
    useEffect(() => {
      const handleScroll = () => {
        if (panelContentRef.current && originalSectionRef.current && showPlans) {
          const panelRect = panelContentRef.current.getBoundingClientRect();
          const sectionRect = originalSectionRef.current.getBoundingClientRect();
          
          setIsScrolled(sectionRect.bottom < panelRect.top);
        }
      };
      
      const panelContent = panelContentRef.current;
      if (panelContent) {
        panelContent.addEventListener('scroll', handleScroll);
        handleScroll();
      }
      
      return () => {
        if (panelContent) {
          panelContent.removeEventListener('scroll', handleScroll);
        }
      };
    }, [showPlans]);
    
    return (
      <div className={`fixed inset-y-0 right-0 w-full sm:w-1/2 bg-white shadow-xl z-40 flex flex-col rounded-l-xl sm:rounded-l-xl border-l border-gray-200 transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : 'translate-x-full'}`}>
        <div className="p-3 sm:p-4 border-b border-gray-200 flex justify-between items-center">
          <h2 className="text-lg sm:text-xl font-semibold text-gray-800">Policy Selection</h2>
          <button 
            onClick={onClose}
            className="p-1 text-gray-600 hover:bg-gray-200 rounded-full transition-colors duration-200"
            aria-label="Close panel"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
              <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div ref={panelContentRef} className="flex-grow overflow-y-auto">
          {showPlans && (
            <div className={`sticky top-0 z-10 bg-white p-2 sm:p-3 border-b border-gray-200 shadow-sm transition-all duration-300 ${isScrolled ? 'py-1' : 'py-2 sm:py-3'}`}>
              <div className="flex justify-center space-x-1 sm:space-x-2">
                {['Health', 'Term', 'Motor'].map((type) => (
                  <button
                    key={type}
                    onClick={() => handlePolicyTypeChange(type)}
                    className={`px-2 sm:px-3 py-1 rounded-full text-xs font-medium transition-all duration-300
                      ${selectedPolicyType === type
                        ? 'bg-cyan-600 text-white shadow-sm'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      } ${isScrolled ? 'text-[10px] px-1 sm:px-2 py-0.5' : ''}`}
                    aria-label={`Select ${type} insurance`}
                    aria-pressed={selectedPolicyType === type}
                  >
                    {type}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          <div ref={originalSectionRef} className="p-3 sm:p-4 border-b border-gray-200">
            <h3 className="text-base sm:text-lg font-semibold text-gray-800 mb-2 sm:mb-3">Select Policy Type</h3>
            <div className="grid grid-cols-3 gap-1 sm:gap-2">
              {['Health', 'Term', 'Motor'].map((type) => (
                <button
                  key={type}
                  onClick={() => {
                    setSelectedPolicyType(type);
                    setShowPlans(false);
                  }}
                  className={`flex flex-col items-center p-2 sm:p-3 rounded-xl shadow-md transition duration-300 ease-in-out transform hover:-translate-y-1 focus:outline-none focus:ring-2
                    ${selectedPolicyType === type
                      ? 'bg-yellow-400 border-yellow-500 text-yellow-900 shadow-lg ring-yellow-300'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-800 focus:ring-cyan-400'
                    }`}
                  aria-label={`Select ${type} insurance`}
                  aria-pressed={selectedPolicyType === type}
                >
                  {type === 'Health' && (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6 text-cyan-600 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                      <path strokeLinecap="round" strokeLinejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                  )}
                  {type === 'Term' && (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6 text-green-600 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                      <path strokeLinecap="round" strokeLinejoin="round" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2-1.343-2-3-2zM12 14c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2z" />
                      <path strokeLinecap="round" strokeLinejoin="round" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  )}
                  {type === 'Motor' && (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6 text-red-600 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                      <path strokeLinecap="round" strokeLinejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                    </svg>
                  )}
                  <span className="text-xs sm:text-sm font-semibold text-gray-800">{type}</span>
                </button>
              ))}
            </div>
          </div>
          
          <div className="p-3 sm:p-4 bg-gray-50 border-b border-gray-200">
            <h3 className="text-base sm:text-lg font-semibold text-gray-800 mb-2 sm:mb-3">Select Budget</h3>
            <div className="max-w-lg mx-auto">
              <p className="text-lg sm:text-xl font-bold text-gray-800 mb-3 sm:mb-4">₹{parseInt(selectedBudget).toLocaleString('en-IN')}</p>
              <input
                type="range"
                min="5000"
                max="50000"
                step="5000"
                value={selectedBudget}
                onChange={(e) => setSelectedBudget(e.target.value)}
                className="w-full h-2 rounded-lg appearance-none cursor-pointer bg-cyan-400"
                style={{ '--thumb-color': '#06b6d4' }}
                aria-label="Select budget amount"
              />
              <div className="flex justify-between text-xs sm:text-sm text-gray-600 mt-2">
                <span>₹5,000</span>
                <span>₹50,000</span>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4 mt-6 sm:mt-8 text-gray-800">
                <div className="p-2 sm:p-3 bg-white rounded-xl shadow-sm border border-gray-200">
                  <p className="font-semibold text-xs sm:text-sm">Ensure</p>
                  <p className="text-base sm:text-lg font-bold text-cyan-600">{ensureAmount}</p>
                </div>
                <div className="p-2 sm:p-3 bg-white rounded-xl shadow-sm border border-gray-200">
                  <p className="font-semibold text-xs sm:text-sm">Monthly</p>
                  <p className="text-base sm:text-lg font-bold text-cyan-600">{monthlyPremium}</p>
                </div>
                <div className="p-2 sm:p-3 bg-white rounded-xl shadow-sm border border-gray-200">
                  <p className="font-semibold text-xs sm:text-sm">Total Cover</p>
                  <p className="text-base sm:text-lg font-bold text-cyan-600">{totalCoverAmount}</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="p-3 sm:p-4 border-b border-gray-200 flex justify-center">
            <button
              onClick={handleGetPlansClick}
              disabled={!selectedPolicyType}
              className={`font-medium py-2 px-4 sm:px-6 rounded-lg shadow transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 text-sm sm:text-base
                ${selectedPolicyType ? 'bg-cyan-600 hover:bg-cyan-700 text-white focus:ring-cyan-300' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
              aria-label="Get insurance plans"
            >
              Get Plans
            </button>
          </div>
          
          {showPlans && selectedPolicyType && (
            <div ref={policyListingRef} className="p-3 sm:p-4">
              <h3 className="text-base sm:text-lg font-semibold text-gray-800 mb-3 sm:mb-4">
                {selectedPolicyType} Plans
              </h3>
              
              {comparisonFeedback && (
                <div className="mb-3 sm:mb-4 p-2 sm:p-3 bg-cyan-100 text-cyan-800 rounded-lg text-center font-medium flex flex-col sm:flex-row justify-between items-center">
                  <span className="text-sm sm:text-base">{comparisonFeedback}</span>
                  {policiesToCompare.length > 0 && (
                    <button
                      onClick={onClearComparison}
                      className="mt-2 sm:mt-0 sm:ml-4 px-3 py-1 bg-gray-200 text-gray-700 text-sm rounded-md hover:bg-gray-300 transition-colors duration-200"
                      aria-label="Clear all selections"
                    >
                      Clear All
                    </button>
                  )}
                </div>
              )}
              
              <div className="space-y-3 sm:space-y-4">
                {sortedPolicies.map((policy) => (
                  <PolicyCard
                    key={policy.id}
                    policy={policy}
                    onGetAdvice={(policy) => {
                      onGetAdvice(policy);
                      onClose();
                    }}
                    onCompareClick={onCompareClick}
                    isSelectedForComparison={policiesToCompare.some(p => p.id === policy.id)}
                    disableCompareButton={policiesToCompare.length >= 5 && !policiesToCompare.some(p => p.id === policy.id)}
                    isPolicyForAdvice={policyForAdvice && policy.id === policyForAdvice.id}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
        
        {policiesToCompare.length > 0 && (
          <div className="fixed bottom-2 sm:bottom-6 left-1/2 transform -translate-x-1/2 bg-white p-2 sm:p-4 shadow-lg border border-gray-200 rounded-xl flex justify-center items-center space-x-2 sm:space-x-4 z-30 w-11/12 sm:w-auto">
            <button
              onClick={() => {
                onClose();
                const policyNames = policiesToCompare.map(policy => `"${policy.name}"`).join(', ');
                const message = `I would like to discuss comparing ${policyNames}. Can you help me understand the differences and recommend which one is better for my needs?`;
                console.log('Chat with policies:', message);
              }}
              disabled={policiesToCompare.length < 1}
              className={`font-medium py-1 sm:py-2 px-3 sm:px-5 rounded-lg shadow transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 text-xs sm:text-sm
                ${policiesToCompare.length >= 1 ? 'bg-purple-500 hover:bg-purple-600 text-white focus:ring-purple-300 shadow-xl' : 
                  'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
              aria-label={`Compare ${policiesToCompare.length} policies`}
            >
              Compare ({policiesToCompare.length})
            </button>
            <button
              onClick={onClearComparison}
              className="font-medium py-1 sm:py-1.5 px-2 sm:px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-300 text-xs"
              aria-label="Clear all selections"
            >
              Clear All
            </button>
          </div>
        )}
      </div>
    );
  };

  // Simple Chat Screen Component (placeholder for full chat functionality)
  const PolicyAdvisorChat = () => {
    const [inputMessage, setInputMessage] = useState('');
    const [messages, setMessages] = useState([
      { id: 1, text: "Hello! I'm your Policy Advisor. How can I help you today?", sender: 'bot' }
    ]);
    
    const handleSend = () => {
      if (inputMessage.trim() === '') return;
      
      const newMessage = { id: messages.length + 1, text: inputMessage, sender: 'user' };
      setMessages(prev => [...prev, newMessage]);
      setInputMessage('');
      
      // Simple bot response
      setTimeout(() => {
        const botResponse = { 
          id: messages.length + 2, 
          text: `Thank you for asking about "${inputMessage}". I'm here to help with your policy questions. What else can I assist with?`, 
          sender: 'bot' 
        };
        setMessages(prev => [...prev, botResponse]);
      }, 1000);
    };

    const suggestedQuestions = [
      "What are the key benefits of health insurance?",
      "How do I choose the right policy?",
      "What factors affect insurance premiums?",
      "Can you explain the terms and conditions?",
      "What is the importance of insurance in financial planning?"
    ];
    
    return (
      <div className="flex flex-col h-full bg-slate-50 flex-grow rounded-xl shadow-lg border border-gray-200 relative min-h-[calc(100vh-6rem)]">
        <MenuSidePanel
          isOpen={showMenuSidePanel}
          onClose={() => setShowMenuSidePanel(false)}
          selectedPolicyType={selectedPolicyType}
          setSelectedPolicyType={setSelectedPolicyType}
          selectedBudget={selectedBudget}
          setSelectedBudget={setSelectedBudget}
          policiesToCompare={policiesToCompare}
          onCompareClick={handleCompareClick}
          onClearComparison={handleClearComparison}
          onGetAdvice={handleGetAdvice}
          comparisonFeedback={comparisonFeedback}
          policyForAdvice={policyForAdvice}
          setShowMenuSidePanel={setShowMenuSidePanel}
        />
        
        <div className="flex flex-col flex-grow overflow-hidden w-full">
          <div className="flex-grow overflow-y-auto p-3 sm:p-4 thin-scrollbar">
            <div className="w-full max-w-2xl mx-auto">
              <h1 className="text-2xl sm:text-3xl font-semibold text-gray-800 mb-4 sm:mb-6 text-center">Hello, Policy Advisor</h1>
              
              <div className="space-y-3 sm:space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`p-3 sm:p-4 rounded-xl max-w-[80%] break-words shadow-sm
                        ${message.sender === 'user'
                          ? 'bg-cyan-600 text-white shadow-md'
                          : 'bg-white text-black shadow-sm'
                        }`}
                    >
                      {message.text}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <div className="px-3 sm:px-4 py-0.5 bg-white border-t border-gray-200">
            <p className="text-xs sm:text-sm text-gray-600 mb-1 text-center"></p>
            
            <AutoScrollingQuestions 
              questions={suggestedQuestions}
              onQuestionClick={(question) => setInputMessage(question)}
            />
          </div>
          
          <div className="p-3 sm:p-4 pb-200 sm:pb-32 bg-slate-50 border-t border-gray-200 flex justify-center rounded-b-xl">
            <div className="w-full max-w-2xl flex flex-col">
              <div className="flex items-center border border-gray-300 rounded-2xl bg-white shadow-sm px-2 py-2">
                <button className="p-1 sm:p-2 text-gray-500 hover:bg-gray-100 rounded-full transition-colors duration-200" aria-label="Add attachment">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                </button>
                <input
                  type="text"
                  placeholder="Ask Policy Advisor..."
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      handleSend();
                    }
                  }}
                  className="flex-grow p-2 rounded-2xl focus:outline-none bg-transparent font-inter text-sm"
                  aria-label="Ask Policy Advisor"
                />
                {inputMessage.trim() ? (
                  <button
                    onClick={handleSend}
                    className="bg-cyan-600 text-white p-1 sm:p-2 rounded-full hover:bg-cyan-700 transition duration-200 ml-2"
                    aria-label="Send message"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  </button>
                ) : (
                  <button className="p-1 sm:p-2 text-gray-500 hover:bg-gray-100 rounded-full transition-colors duration-200 ml-2" aria-label="More options">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 sm:h-6 sm:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a4 4 0 11-8 0v2m8-2a4 4 0 108 0v2M5 19l2-2m-2 2l-2-2m7-10l-2-2m2 2l2-2" />
                    </svg>
                  </button>
                )}
              </div>
              
              <div className="mt-3 bg-cyan-50 rounded-lg p-3 border border-cyan-100">
                <div className="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-500 mt-0.5 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <p className="text-xs text-cyan-700">
                    <span className="font-medium">Tip:</span> Ask about specific policies, compare features, or get personalized recommendations
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderScreen = () => {
    switch (currentScreen) {
      case 'home':
        return (
          <HomeScreen
            onCheckMyPolicyClick={handleCheckMyPolicyFromHome}
            onExplorePolicyTypesClick={handleExplorePolicyTypesFromHome}
          />
        );
      case 'signUp':
        return <SignUpScreen onBack={handleBackClick} onLoginClick={() => navigateTo('login')} />;
      case 'policyAdvisorChat':
        return (
          <div className="flex h-full w-full">
            <ChatHistorySidebar
              isOpen={isChatSidebarOpen}
              onNewChat={handleNewChat}
              onToggleChatSidebar={() => setIsChatSidebarOpen(prev => !prev)}
            />
            <PolicyAdvisorChat />
          </div>
        );
      case 'policyListing':
        return <PolicyListingScreen />;
      case 'login':
        return <LoginScreen onBack={handleBackClick} onSignUpClick={() => navigateTo('signUp')} />;
      default:
        return <HomeScreen onCheckMyPolicyClick={handleCheckMyPolicyFromHome} onExplorePolicyTypesClick={handleExplorePolicyTypesFromHome} />;
    }
  };

  return (
    <div className="min-h-screen bg-white flex flex-col items-center font-inter text-gray-800">
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
          body { font-family: 'Inter', sans-serif; }
          
          input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--thumb-color);
            cursor: pointer;
            box-shadow: 0 0 2px rgba(0,0,0,0.3);
            margin-top: -8px;
          }
          input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var('--thumb-color');
            cursor: pointer;
            box-shadow: 0 0 2px rgba(0,0,0,0.3);
          }
          
          .thin-scrollbar::-webkit-scrollbar {
            width: 6px;
          }
          .thin-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
          }
          .thin-scrollbar::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
          }
          .thin-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #555;
          }
          
          .hide-horizontal-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
          }
          .hide-horizontal-scrollbar::-webkit-scrollbar {
            display: none;
          }
          
          @keyframes marquee {
            0% { transform: translateX(0%); }
            100% { transform: translateX(-100%); }
          }
          .animate-marquee {
            animation: marquee linear infinite;
          }
          .group:hover .animate-marquee {
            animation-play-state: paused;
          }
        `}
      </style>
      
      <TopBar
        showBackButton={showBackButtonForScreen()}
        onBackClick={handleBackClick}
        title={getScreenTitle()}
        showAuthButtons={showAuthButtonsForScreen()}
        onLoginClick={() => navigateTo('login')}
        onSignUpClick={() => navigateTo('signUp')}
        isChatScreen={currentScreen === 'policyAdvisorChat'}
        onToggleChatSidebar={() => setIsChatSidebarOpen(prev => !prev)}
        onMenuClick={handleMenuClick}
        isDirectChatAccess={isDirectChatAccess}
      />
      
      <div className={`flex-grow w-full mt-14 sm:mt-16 flex flex-col ${
          currentScreen === 'policyAdvisorChat' && isChatSidebarOpen ? 'ml-0 sm:ml-64' : ''
      } ${
          currentScreen !== 'policyAdvisorChat' ? 'p-2 sm:p-4 md:p-6 lg:p-8' : 'h-[calc(100vh-3.5rem)] sm:h-[calc(100vh-4rem)]'
      }`}>
        {renderScreen()}
      </div>
    </div>
  );
};

export default App;